{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\PruebaConceptoCognito\\\\Worn-Off-Keys-Cognito-Tutorials\\\\1-Cognito-Signup\\\\src\\\\components\\\\account.js\";\nimport React, { createContext } from \"react\";\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\";\nimport UserPool from \"../UserPool\";\nconst AccountContext = createContext();\n\nconst Account = props => {\n  const getSession = async () => await new Promise((resolve, reject) => {\n    const user = UserPool.getCurrentUser();\n\n    if (user) {\n      user.getSession((err, session) => {\n        if (err) {\n          reject();\n        } else {\n          resolve(session);\n        }\n      });\n    }\n  });\n\n  const authenticate = async (Username, Password) => await new Promise((resolve, reject) => {\n    const user = new CognitoUser({\n      Username,\n      Pool: UserPool\n    });\n    const authDetails = new AuthenticationDetails({\n      Username,\n      Password\n    });\n    user.authenticateUser(authDetails, {\n      onSuccess: data => {\n        console.log(\"onSuccess:\", data);\n        resolve(data);\n      },\n      onFailure: err => {\n        console.error(\"onFailure:\", err);\n        reject(err);\n      },\n      newPasswordRequired: data => {\n        console.log(\"newPasswordRequired:\", data);\n        resolve(data);\n      }\n    });\n  });\n\n  const logout = () => {\n    const user = UserPool.getCurrentUser();\n\n    if (user) {\n      user.signOut();\n      location.reload();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(AccountContext.Provider, {\n    value: {\n      authenticate,\n      getSession,\n      logout\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport { Account, AccountContext };","map":{"version":3,"sources":["C:/Users/DELL/Desktop/PruebaConceptoCognito/Worn-Off-Keys-Cognito-Tutorials/1-Cognito-Signup/src/components/account.js"],"names":["React","createContext","CognitoUser","AuthenticationDetails","UserPool","AccountContext","Account","props","getSession","Promise","resolve","reject","user","getCurrentUser","err","session","authenticate","Username","Password","Pool","authDetails","authenticateUser","onSuccess","data","console","log","onFailure","error","newPasswordRequired","logout","signOut","location","reload","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,WAAT,EAAsBC,qBAAtB,QAAmD,4BAAnD;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,MAAMC,cAAc,GAAGJ,aAAa,EAApC;;AAEA,MAAMK,OAAO,GAAGC,KAAK,IAAI;AAEvB,QAAMC,UAAU,GAAG,YAEjB,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrC,UAAMC,IAAI,GAAGR,QAAQ,CAACS,cAAT,EAAb;;AAEA,QAAGD,IAAH,EAAS;AACPA,MAAAA,IAAI,CAACJ,UAAL,CAAgB,CAACM,GAAD,EAAMC,OAAN,KAAkB;AAChC,YAAGD,GAAH,EAAO;AACLH,UAAAA,MAAM;AACP,SAFD,MAEK;AACHD,UAAAA,OAAO,CAACK,OAAD,CAAP;AACD;AACF,OAND;AAOD;AACF,GAZK,CAFR;;AAgBE,QAAMC,YAAY,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAEjB,MAAM,IAAIT,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnC,UAAMC,IAAI,GAAG,IAAIV,WAAJ,CAAgB;AACzBe,MAAAA,QADyB;AAEzBE,MAAAA,IAAI,EAAEf;AAFmB,KAAhB,CAAb;AAKE,UAAMgB,WAAW,GAAG,IAAIjB,qBAAJ,CAA0B;AAC5Cc,MAAAA,QAD4C;AAE5CC,MAAAA;AAF4C,KAA1B,CAApB;AAKFN,IAAAA,IAAI,CAACS,gBAAL,CAAsBD,WAAtB,EAAmC;AAC/BE,MAAAA,SAAS,EAAEC,IAAI,IAAI;AACjBC,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,IAA1B;AACAb,QAAAA,OAAO,CAACa,IAAD,CAAP;AACD,OAJ8B;AAM/BG,MAAAA,SAAS,EAAEZ,GAAG,IAAI;AAChBU,QAAAA,OAAO,CAACG,KAAR,CAAc,YAAd,EAA4Bb,GAA5B;AACAH,QAAAA,MAAM,CAACG,GAAD,CAAN;AACD,OAT8B;AAW/Bc,MAAAA,mBAAmB,EAAEL,IAAI,IAAI;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,IAApC;AACAb,QAAAA,OAAO,CAACa,IAAD,CAAP;AACD;AAd8B,KAAnC;AAgBH,GA3BK,CAFV;;AAgCA,QAAMM,MAAM,GAAG,MAAM;AACnB,UAAMjB,IAAI,GAAGR,QAAQ,CAACS,cAAT,EAAb;;AACA,QAAGD,IAAH,EAAS;AACPA,MAAAA,IAAI,CAACkB,OAAL;AACAC,MAAAA,QAAQ,CAACC,MAAT;AACD;AACF,GAND;;AAQA,sBACI,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAG;AAC7BhB,MAAAA,YAD6B;AAE7BR,MAAAA,UAF6B;AAG7BqB,MAAAA;AAH6B,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKKtB,KAAK,CAAC0B,QALX,CADJ;AASH,CAnED;;AAqEA,SAAQ3B,OAAR,EAAiBD,cAAjB","sourcesContent":["import React, { createContext } from \"react\";\r\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\";\r\nimport UserPool from \"../UserPool\";\r\n\r\nconst AccountContext = createContext();\r\n\r\nconst Account = props => {\r\n\r\n  const getSession = async () =>\r\n\r\n    await new Promise((resolve, reject) => {\r\n      const user = UserPool.getCurrentUser();\r\n\r\n      if(user) {\r\n        user.getSession((err, session) => {\r\n          if(err){\r\n            reject();\r\n          }else{\r\n            resolve(session);\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    const authenticate = async (Username, Password) => \r\n\r\n        await new Promise((resolve, reject) => {\r\n            const user = new CognitoUser({\r\n                Username,\r\n                Pool: UserPool\r\n              });\r\n    \r\n              const authDetails = new AuthenticationDetails({\r\n                Username,\r\n                Password\r\n              });\r\n        \r\n            user.authenticateUser(authDetails, {\r\n                onSuccess: data => {\r\n                  console.log(\"onSuccess:\", data);\r\n                  resolve(data);\r\n                },\r\n          \r\n                onFailure: err => {\r\n                  console.error(\"onFailure:\", err);\r\n                  reject(err);\r\n                },\r\n          \r\n                newPasswordRequired: data => {\r\n                  console.log(\"newPasswordRequired:\", data);\r\n                  resolve(data);\r\n                }\r\n              });\r\n        });\r\n    \r\n\r\n    const logout = () => {\r\n      const user = UserPool.getCurrentUser();\r\n      if(user) {\r\n        user.signOut();\r\n        location.reload();\r\n      }\r\n    }\r\n\r\n    return (\r\n        <AccountContext.Provider value= {{\r\n            authenticate,\r\n            getSession,\r\n            logout\r\n        }}>\r\n            {props.children}\r\n        </AccountContext.Provider>\r\n    )\r\n};\r\n\r\nexport {Account, AccountContext};\r\n"]},"metadata":{},"sourceType":"module"}